{"version":3,"sources":["components/Infobox.js","util.js","components/Map.js","components/Table.js","components/Linegraph.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","cases","total","date","Card","className","CardContent","Typography","color","numeral","format","caseTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","data","caseType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","Date","updated","toDateString","todayCases","Map","countries","zoom","TileLayer","url","attribution","Table","sortColumn","onClick","column","isAscend","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","Linegraph","useState","setData","useEffect","fetch","then","response","json","chartData","buildChartData","catch","lastDataPoint","Object","entries","newDataPoint","x","y","push","splice","length","datasets","backgroundColor","borderColor","App","setCountries","selectedcountry","setSelectedCountry","setCountryInfo","tableData","setTableData","setSortColumn","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","a","name","iso2","flag","_","orderBy","ex","console","log","message","getCountriesData","handleChange","target","FormControl","Select","variant","onChange","MenuItem","style","marginRight","width","src","alt","todayRecovered","todayDeaths","sortorder","newdata","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cc5993a.chunk.js","sourcesContent":["import numeral from 'numeral';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nconst Infobox = ({ title, cases, total, date }) => {\r\n    return (\r\n        <Card className=\"infobox\">\r\n            <CardContent>\r\n                <Typography\r\n                    className='infobox_title'\r\n                    color='textSecondary'>\r\n                    <h4>{date}</h4>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className='infobox_cases'>{numeral(cases).format('0,0')}</h2>\r\n                <Typography\r\n                    className='infobox_total'\r\n                    color='textSecondary'>\r\n                    {numeral(total).format('0,0')}<span> Total</span>\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Infobox;","import { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\n\r\nconst caseTypeColors = {\r\n    cases: {\r\n        hex: '#cc1034',\r\n        multiplier: 800,\r\n\r\n    },\r\n    recovered: {\r\n        hex: '#7dd71d',\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: '#fb4443',\r\n        multiplier: 2000,\r\n    }\r\n}\r\n\r\nexport const showDataOnMap = (data, caseType = 'cases') => data.map(country =>\r\n    <Circle\r\n        key={country.country}\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={caseTypeColors[caseType].hex}\r\n        fillColor={\r\n            caseTypeColors[caseType].hex\r\n        }\r\n        radius={\r\n            Math.sqrt(country[caseType]) * caseTypeColors[caseType].multiplier\r\n        }\r\n    >\r\n        <Popup key={country.country}>\r\n            <h4>{country.country}</h4>\r\n            <span>{new Date(country.updated).toDateString()}</span>\r\n            <h4>{numeral(country.todayCases).format('0,0')}</h4>\r\n            <span>{numeral(country.cases).format('0,0')}<span> Total</span></span>\r\n        </Popup>\r\n    </Circle>\r\n)\r\n","import { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport '../css/Map.css';\r\nimport { showDataOnMap } from './../util';\r\n\r\n\r\nconst Map = ({ countries, center, zoom }) => {\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap\r\n                center={center}\r\n                zoom={zoom}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries)}\r\n            </LeafletMap >\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import numeral from 'numeral';\r\nimport DetailsIcon from '@material-ui/icons/Details';\r\nimport ChangeHistoryIcon from '@material-ui/icons/ChangeHistory';\r\n\r\nconst Table = ({ countries, sortColumn, onClick }) => {\r\n\r\n    return (\r\n        <div className='table'>\r\n            <tr>\r\n                <th onClick={() => onClick('country')}><span>Country\r\n                {sortColumn.column === 'country' && (sortColumn.isAscend\r\n                        ? <ChangeHistoryIcon className='sorticon' />\r\n                        : <DetailsIcon className='sorticon' />\r\n                    )}</span></th>\r\n                <th onClick={() => onClick('cases')}><span>Cases {sortColumn.column === 'cases' && (sortColumn.isAscend\r\n                    ? <ChangeHistoryIcon className='sorticon' />\r\n                    : <DetailsIcon className='sorticon' />\r\n                )}</span></th>\r\n            </tr>\r\n            {\r\n                countries.map(({ country, cases }) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>{numeral(cases).format('0,0')}</td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import { Line } from 'react-chartjs-2';\r\nimport { useState, useEffect } from 'react';\r\nimport numeral from 'numeral';\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: (tooltipItem, data) => {\r\n                return numeral(tooltipItem.value).format('+0.0');\r\n            }\r\n        }\r\n    },\r\n\r\n    scales: {\r\n        xAxes: [{\r\n            type: 'time',\r\n            time: {\r\n                format: 'MM/DD/YY',\r\n                tooltipFormat: 'll'\r\n            }\r\n        }],\r\n\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: (value, index, values) => {\r\n                        return numeral(value).format('0a');\r\n                    }\r\n\r\n                }\r\n            }\r\n        ]\r\n\r\n    }\r\n}\r\n\r\nconst Linegraph = () => {\r\n    const [data, setData] = useState();\r\n    useEffect(() => {\r\n        fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data);\r\n                setData(chartData);\r\n            })\r\n            .catch()\r\n    }, [])\r\n\r\n    const buildChartData = (data, caseType = 'cases') => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for (const [date, cases] of Object.entries(data[caseType])) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: cases - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = cases;\r\n        }\r\n        return chartData.splice(-14);\r\n    }\r\n\r\n    return (\r\n        <div className=\"linegraph\">\r\n            { data?.length > 0 && <Line\r\n                data={{\r\n                    datasets: [{\r\n                        backgroundColor: 'rgba(204, 16, 52, 0.6)',\r\n                        borderColor: '#cc1034',\r\n                        data\r\n                    }]\r\n                }}\r\n\r\n                options={options}\r\n            />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Linegraph;","import { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core'\nimport { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport './css/App.css';\nimport Infobox from './components/Infobox';\nimport Map from './components/Map'\nimport Table from './components/Table';\nimport Linegraph from './components/Linegraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [selectedcountry, setSelectedCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [sortColumn, setSortColumn] = useState({\n    column: 'cases',\n    isAscend: false\n  });\n  const [mapCenter, setMapCenter] = useState([-27, 133]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => setCountryInfo(data))\n      .catch()\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            flag: country.countryInfo.flag\n          }));\n          setCountries(countries);\n          setTableData(_.orderBy(data, [sortColumn.column], [sortColumn.isAscend ? 'asc' : 'desc']));\n          setMapCountries(data)\n        })\n        .catch(ex => console.log(ex.message))\n    };\n\n    getCountriesData();\n  }, [])\n\n  const handleChange = async ({ target }) => {\n    setSelectedCountry(target.value);\n    const url = target.value === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : 'https://disease.sh/v3/covid-19/countries/' + target.value;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(3);\n      })\n      .catch()\n  }\n\n  const handleSort = column => {\n    const sortorder = column === sortColumn.column ? !sortColumn.isAscend : true;\n    setSortColumn({\n      isAscend: sortorder,\n      column\n    });\n\n    const newdata = _.orderBy(tableData, [column], [sortorder ? 'asc' : 'desc']);\n    setTableData(newdata);\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"app_left\">\n        <div className=\"header\">\n          <h1>COVID-19 UPDATE</h1>\n          <FormControl className='app_dropdown'>\n            <Select\n              variant='outlined'\n              value={selectedcountry}\n              onChange={handleChange}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {\n                countries.map(country => <MenuItem\n                  key={country.name}\n                  value={country.value}\n                ><img style={{ marginRight: '5px', width: '20px' }} src={country.flag} alt={country.name} />{country.name}</MenuItem>)\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <Infobox title='Coronavirus Cases' cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n            date={new Date(countryInfo.updated).toDateString()} />\n          <Infobox title='Recovered'\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n            date={new Date(countryInfo.updated).toDateString()} />\n          <Infobox title='Deaths'\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n            date={new Date(countryInfo.updated).toDateString()} />\n        </div>\n        {/* Map */}\n        <Map\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table\n            countries={tableData}\n            sortColumn={sortColumn}\n            onClick={handleSort}\n          />\n          <h3>Worldwide New Cases</h3>\n          <Linegraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}